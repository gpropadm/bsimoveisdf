import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '@/lib/auth'

export async function POST(request: NextRequest) {
  try {
    console.log('üé• Verificando sess√£o para upload de v√≠deo...')
    // Verificar autentica√ß√£o
    const session = await getServerSession(authOptions)
    console.log('üë§ Sess√£o encontrada:', session ? 'SIM' : 'N√ÉO')
    if (!session) {
      console.log('‚ùå Upload de v√≠deo bloqueado - sem sess√£o')
      return NextResponse.json({ error: 'N√£o autorizado' }, { status: 401 })
    }

    const data = await request.formData()
    const video: File | null = data.get('video') as unknown as File

    if (!video) {
      return NextResponse.json({ error: 'Nenhum v√≠deo enviado' }, { status: 400 })
    }

    // Verificar se √© um arquivo de v√≠deo
    if (!video.type.startsWith('video/')) {
      return NextResponse.json({ error: 'Arquivo deve ser um v√≠deo' }, { status: 400 })
    }

    // Verificar tamanho (m√°ximo 50MB)
    if (video.size > 50 * 1024 * 1024) {
      return NextResponse.json({ error: 'V√≠deo muito grande. M√°ximo 50MB' }, { status: 400 })
    }

    // Converter v√≠deo para Base64
    const bytes = await video.arrayBuffer()
    const buffer = Buffer.from(bytes)
    const base64 = buffer.toString('base64')
    const mimeType = video.type
    
    // Criar Data URL
    const dataUrl = `data:${mimeType};base64,${base64}`
    
    console.log('üé• V√≠deo convertido para Base64, tamanho:', base64.length)

    return NextResponse.json({
      success: true,
      url: dataUrl
    })

  } catch (error) {
    console.error('‚ùå Erro no upload do v√≠deo:', error)
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    )
  }
}