// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String    @default("admin")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Property {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique // SEO-friendly URL slug
  description String?
  price       Float
  previousPrice Float? // preço anterior para mostrar redução
  priceReduced Boolean @default(false) // se houve redução recente
  priceReducedAt DateTime? // quando foi reduzido
  type        String   // "venda" or "aluguel"
  status      String   @default("disponivel") // "disponivel", "vendido", "alugado", "lancamento", "imovel_novo"
  category    String   // "casa", "apartamento", "cobertura", etc.
  cep         String?  // CEP do imóvel
  address     String
  city        String
  state       String
  bedrooms    Int?
  bathrooms   Int?
  parking     Int?     // vagas de garagem
  area        Float?
  images      String?  // JSON string of image URLs
  video       String?  // URL do vídeo (YouTube, Vimeo, etc.)
  featured    Boolean  @default(false)

  // Coordenadas GPS para localização exata (DECIMAL para precisão total)
  latitude    Decimal? @db.Decimal(18, 15)  // Latitude GPS: -90 a +90 com 15 casas decimais
  longitude   Decimal? @db.Decimal(19, 15)  // Longitude GPS: -180 a +180 com 15 casas decimais
  gpsAccuracy Float?   // Precisão do GPS em metros
  
  // Campos específicos para apartamentos/coberturas
  floor       Int?     // andar do apartamento
  condoFee    Float?   // valor do condomínio
  amenities   String?  // JSON string com comodidades do condomínio
  apartmentTotalArea Float?   // área total do apartamento (m²)
  apartmentUsefulArea Float?  // área útil do apartamento (m²)
  suites      Int?     // número de suítes
  iptu        Float?   // valor do IPTU mensal
  
  // Campos específicos para terrenos
  zoning      String?  // zoneamento (residencial, comercial, industrial)
  slope       String?  // topografia (plano, aclive, declive)
  frontage    Float?   // frente do terreno (metros)
  
  // Campos específicos para fazendas
  totalArea   Float?   // área total da fazenda
  cultivatedArea Float? // área cultivada
  pastures    Float?   // área de pastagens
  areaUnit    String?  // unidade de medida (hectares, alqueires, etc.)
  buildings   String?  // JSON string com benfeitorias da fazenda
  waterSources String? // fontes de água (rios, poços, açudes)
  
  // Campos específicos para casas
  houseType   String?  // tipo de casa (térrea, sobrado, condomínio)
  yard        Boolean? // quintal (sim/não)
  garage      String?  // tipo de garagem (coberta, descoberta, fechada)
  lotArea     Float?   // área do lote (m²)
  builtArea   Float?   // área construída (m²)
  
  // Campos específicos para imóveis comerciais
  commercialType String? // tipo comercial (loja, sala, galpão, etc.)
  floor_commercial Int?  // andar (para salas comerciais)
  businessCenter String? // centro empresarial/shopping/prédio
  features      String?  // JSON com características comerciais

  // Formas de pagamento aceitas
  acceptsFinancing Boolean @default(false) // Aceita financiamento bancário
  acceptsTrade     Boolean @default(false) // Aceita permuta/troca
  acceptsCar       Boolean @default(false) // Aceita carro como parte do pagamento

  // Marketplace
  compartilharMarketplace Boolean @default(false) // Compartilhar no marketplace regional
  marketplaceId           String?  // ID do imóvel no marketplace (se publicado)
  marketplaceSyncAt       DateTime? // Última sincronização com marketplace

  // Estatísticas
  views       Int      @default(0) // Contador de visualizações da página do imóvel

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  leads Lead[]
  appointments Appointment[]
  whatsappMessages WhatsAppMessage[]
  priceAlerts PriceAlert[]
  videoLikes VideoLike[]

  @@map("properties")
}

model VideoLike {
  id         String   @id @default(cuid())
  propertyId String
  ipAddress  String   // IP do visitante
  userAgent  String?  // User Agent para identificação
  liked      Boolean  // true = like, false = dislike
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  // Evita duplicatas: mesmo IP só pode votar uma vez por imóvel
  @@unique([propertyId, ipAddress])
  @@map("video_likes")
}

model Lead {
  id           String   @id @default(cuid())
  name         String
  email        String?
  phone        String?
  message      String?
  propertyId   String?  // referência opcional ao imóvel
  propertyTitle String? // título do imóvel para histórico
  propertyPrice Float?  // preço do imóvel para histórico
  propertyType String?  // tipo do imóvel (venda/aluguel)
  source       String   @default("site") // "site", "whatsapp", "telefone", etc.
  status       String   @default("novo") // "novo", "contatado", "interessado", "convertido", "perdido"
  notes        String?  // observações do corretor

  // CRM Kanban - Stage atual
  currentStage String   @default("captado") // ID do LeadStage atual
  stageUpdatedAt DateTime @default(now())

  // Preferências do cliente para matching
  preferredPriceMin    Float?   // preço mínimo de interesse
  preferredPriceMax    Float?   // preço máximo de interesse
  preferredCategory    String?  // casa, apartamento, etc.
  preferredCity        String?  // cidade preferida
  preferredState       String?  // estado preferido
  preferredBedrooms    Int?     // quantidade de quartos
  preferredBathrooms   Int?     // quantidade de banheiros
  preferredType        String?  // venda ou aluguel
  enableMatching       Boolean  @default(true) // se quer receber sugestões

  // Campos para agentes IA
  agentProcessed    Boolean?   @default(false)
  agentStatus       String?    // 'sent', 'error', 'processed', 'whatsapp_sent', 'whatsapp_error'
  agentProcessedAt  DateTime?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  property Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)
  appointments Appointment[]

  @@map("leads")
}

model Appointment {
  id          String   @id @default(cuid())
  propertyId  String
  leadId      String?  // Conecta com o sistema de leads existente
  
  // Participantes
  clientName    String
  clientEmail   String
  clientPhone   String
  realtorId     String?  // Futuro: sistema de corretores
  
  // Agendamento
  scheduledDate DateTime
  duration      Int      @default(60) // minutos
  status        String   @default("agendado") // "agendado", "confirmado", "cancelado", "concluído"
  
  // Notificações
  clientNotified    Boolean @default(false)
  realtorNotified   Boolean @default(false)
  ownerNotified     Boolean @default(false)
  
  // Feedback pós-visita
  clientFeedback    String?
  interestLevel     Int?     // 1-5
  
  // Localização para confirmação
  checkInTime       DateTime?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  lead     Lead?    @relation(fields: [leadId], references: [id], onDelete: SetNull)

  @@map("appointments")
}

model PropertySubmission {
  id            String   @id @default(cuid())
  
  // Informações do proprietário
  ownerName     String
  ownerEmail    String
  ownerPhone    String
  
  // Informações do imóvel
  title         String
  description   String?
  propertyType  String   // "casa", "apartamento", "cobertura", etc.
  saleType      String   // "venda", "aluguel"
  price         Float?
  address       String
  city          String
  state         String
  neighborhood  String?
  bedrooms      Int?
  bathrooms     Int?
  parking       Int?
  area          Float?
  
  // Status da submissão
  status        String   @default("pendente") // "pendente", "em_analise", "aprovado", "rejeitado", "publicado"
  adminNotes    String?  // Observações do admin
  
  // Preferências
  hasPhotos     Boolean  @default(false)
  acceptsVisits Boolean  @default(true)
  urgency       String   @default("normal") // "normal", "alta", "baixa"
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("property_submissions")
}

model PropertyRequest {
  id              String   @id @default(cuid())
  
  // Informações do solicitante
  clientName      String
  clientEmail     String
  clientPhone     String
  
  // Preferências do imóvel
  propertyType    String?  // "casa", "apartamento", "cobertura", etc.
  saleType        String   // "venda", "aluguel"
  priceMin        Float?
  priceMax        Float?
  city            String
  neighborhood    String?
  bedrooms        Int?
  bathrooms       Int?
  parking         Int?
  areaMin         Float?
  areaMax         Float?
  
  // Detalhes da solicitação
  description     String?  // Descrição detalhada do que procura
  timeline        String?  // "urgente", "1_mes", "3_meses", "6_meses", "sem_pressa"
  budget          String?  // "a_vista", "financiado", "fgts"
  
  // Status da solicitação
  status          String   @default("ativo") // "ativo", "atendido", "cancelado", "pausado"
  adminNotes      String?  // Observações do admin
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("property_requests")
}

model ContactMessage {
  id          String   @id @default(cuid())
  
  // Informações do contato
  name        String
  email       String
  phone       String?
  subject     String
  message     String
  
  // Contexto
  source      String   @default("site") // "site", "whatsapp", "telefone"
  referrer    String?  // URL de onde veio
  
  // Status
  status      String   @default("novo") // "novo", "lido", "respondido", "resolvido"
  adminNotes  String?  // Observações do admin
  respondedAt DateTime?
  respondedBy String?  // ID do admin que respondeu
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("contact_messages")
}

model Settings {
  id                   String  @id @default(cuid())
  siteName             String  @default("ImobiNext")
  siteDescription      String  @default("Encontre o imóvel dos seus sonhos")
  contactEmail         String  @default("contato@imobinext.com")
  contactPhone         String  @default("(48) 99864-5864")
  contactWhatsapp      String  @default("5548998645864")
  address              String  @default("Rua das Flores, 123")
  city                 String  @default("Florianópolis")
  state                String  @default("SC")
  socialFacebook       String  @default("https://facebook.com")
  socialInstagram      String  @default("https://instagram.com")
  socialLinkedin       String  @default("https://linkedin.com")
  featuredLimit        Int     @default(6)
  enableRegistrations  Boolean @default(true)
  enableComments       Boolean @default(false)

  // Configurações do Header
  headerTitle          String  @default("Encontre o Imóvel Perfeito")
  headerSubtitle       String  @default("Casas, apartamentos e terrenos dos seus sonhos")

  // Configurações de IA (Anthropic Claude)
  anthropicApiKey      String? // Chave da API Anthropic para o chatbot

  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("settings")
}

model ChatbotStats {
  id              String   @id @default(cuid())
  date            DateTime @default(now()) // Data da estatística
  conversationId  String?  // ID da conversa (opcional)
  messagesCount   Int      @default(1) // Quantidade de mensagens
  tokensInput     Int      @default(0) // Tokens de entrada (prompt)
  tokensOutput    Int      @default(0) // Tokens de saída (resposta)
  costEstimated   Float    @default(0) // Custo estimado em USD
  leadCaptured    Boolean  @default(false) // Se gerou lead

  createdAt       DateTime @default(now())

  @@map("chatbot_stats")
}

model WhatsAppMessage {
  id           String   @id @default(cuid())

  // Identificadores da mensagem
  messageId    String   @unique // ID da mensagem no UltraMsg
  from         String   // Número de telefone de quem enviou
  to           String   // Número de telefone de quem recebeu

  // Conteúdo da mensagem
  body         String   // Texto da mensagem
  type         String   @default("text") // "text", "image", "video", "audio", "document"
  caption      String?  // Legenda para mídias

  // Metadata
  timestamp    DateTime // Quando a mensagem foi enviada/recebida
  fromMe       Boolean  // true se foi enviada por nós, false se recebida
  status       String   @default("sent") // "sent", "delivered", "read", "failed"
  source       String   // "ultramsg_api", "ultramsg_webhook", "baileys"

  // Contexto do imóvel (opcional)
  propertyId   String?  // Relaciona com algum imóvel específico
  contactName  String?  // Nome do contato se conhecido

  // Relacionamentos
  property     Property? @relation(fields: [propertyId], references: [id], onDelete: SetNull)

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("whatsapp_messages")
}

model PriceAlert {
  id          String   @id @default(cuid())

  // Informações do interessado
  name        String
  phone       String   // WhatsApp para envio

  // Imóvel de interesse
  propertyId  String

  // Status do alerta
  active      Boolean  @default(true) // se ainda quer receber avisos

  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamento
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  // Índice único para evitar duplicatas
  @@unique([propertyId, phone])
  @@map("price_alerts")
}

// ============================================
// SISTEMA DE BOTS COM IA
// ============================================

model Bot {
  id          String   @id @default(cuid())
  name        String   // Nome do bot (ex: "Bot de Captação", "Bot de Visitas")
  description String?  // Descrição do que o bot faz

  // Configuração
  type        String   @default("assistido") // "assistido" (template) ou "avancado" (fluxo custom)
  template    String?  // Template usado se tipo = assistido
  active      Boolean  @default(true) // Bot está ativo?

  // Canais onde funciona
  channels    String   @default("whatsapp") // JSON: ["whatsapp", "site", "email"]

  // IA Configuration
  aiProvider  String   @default("anthropic") // "anthropic", "openai"
  aiModel     String   @default("claude-sonnet-4-5") // Modelo específico
  systemPrompt String? // Prompt customizado do sistema

  // Comportamento
  autoCreateLead Boolean @default(true) // Criar lead automaticamente?
  autoAssignBroker Boolean @default(false) // Atribuir corretor automaticamente?

  // Estatísticas
  conversationsCount Int @default(0)
  leadsCreatedCount Int @default(0)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  flows       BotFlow[]
  sessions    BotSession[]

  @@map("bots")
}

model BotFlow {
  id          String   @id @default(cuid())
  botId       String
  name        String   // Nome do fluxo
  description String?

  // Estrutura do fluxo (JSON)
  flowData    String   // JSON com nodes e edges do fluxo

  // Status
  active      Boolean  @default(true)
  version     Int      @default(1)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bot         Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)
  blocks      BotBlock[]

  @@map("bot_flows")
}

model BotBlock {
  id          String   @id @default(cuid())
  flowId      String

  // Identificação
  blockType   String   // "message", "question", "condition", "action", "ai_analysis"
  label       String   // Label do bloco

  // Posição no editor visual
  position    String   // JSON: {x: 100, y: 200}

  // Configuração do bloco (varia por tipo)
  config      String   // JSON com configurações específicas

  // Ordem de execução
  order       Int      @default(0)

  // Condições para este bloco ser executado
  conditions  String?  // JSON com condições

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  flow        BotFlow  @relation(fields: [flowId], references: [id], onDelete: Cascade)

  @@map("bot_blocks")
}

model BotSession {
  id          String   @id @default(cuid())
  botId       String

  // Identificação do usuário
  userId      String?  // ID do lead se já existe
  channel     String   // "whatsapp", "site", "email"
  channelId   String   // Número do WhatsApp, sessionId do site, etc.

  // Estado da conversa
  status      String   @default("active") // "active", "completed", "abandoned"
  currentStep String?  // Qual passo do fluxo está
  context     String?  // JSON com contexto da conversa

  // Histórico de mensagens
  messages    String   // JSON array com histórico

  // Resultado da sessão
  leadCreated Boolean  @default(false)
  leadId      String?  // Lead criado nesta sessão

  // Metadata
  startedAt   DateTime @default(now())
  lastMessageAt DateTime @default(now())
  completedAt DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bot         Bot      @relation(fields: [botId], references: [id], onDelete: Cascade)

  @@map("bot_sessions")
}

// ============================================
// CRM COM FUNIL VISUAL KANBAN
// ============================================

model LeadStage {
  id          String   @id @default(cuid())
  name        String   // "Captado", "Em Atendimento", "Visita Marcada", etc.
  description String?
  color       String   @default("#3B82F6") // Cor do card no Kanban
  icon        String?  // Ícone para exibir

  // Ordem no funil
  order       Int      @default(0)

  // Tipo de stage
  type        String   @default("active") // "active", "won", "lost"

  // Automações
  autoActions String?  // JSON com ações automáticas ao entrar neste stage

  // Estatísticas
  leadsCount  Int      @default(0)

  active      Boolean  @default(true)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  leadHistory LeadHistory[]

  @@map("lead_stages")
}

model LeadHistory {
  id          String   @id @default(cuid())
  leadId      String

  // Mudança de status
  fromStage   String?  // Stage anterior
  toStage     String   // Stage novo

  // Quem fez a mudança
  changedBy   String?  // ID do usuário que mudou
  changedByName String? // Nome do usuário

  // Motivo/observação
  reason      String?
  notes       String?

  // Metadata
  duration    Int?     // Tempo no stage anterior (minutos)

  createdAt   DateTime @default(now())

  stage       LeadStage? @relation(fields: [toStage], references: [id], onDelete: SetNull)

  @@map("lead_history")
}

model LeadAssignment {
  id          String   @id @default(cuid())
  leadId      String   @unique

  // Corretor atribuído
  brokerId    String?  // ID do corretor (User)
  brokerName  String?  // Nome do corretor
  brokerEmail String?
  brokerPhone String?

  // Atribuição
  assignedBy  String?  // Quem atribuiu (ID do User)
  assignedAt  DateTime @default(now())

  // Status
  status      String   @default("assigned") // "assigned", "accepted", "rejected", "completed"

  // Metadata
  notes       String?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("lead_assignments")
}

// ============================================
// LEAD SCORING (PONTUAÇÃO AUTOMÁTICA)
// ============================================

model LeadScore {
  id          String   @id @default(cuid())
  leadId      String   @unique

  // Pontuação
  totalScore  Int      @default(0) // Pontuação total (0-100)

  // Breakdown da pontuação
  profileScore Int     @default(0) // Perfil do lead (dados completos, etc)
  engagementScore Int  @default(0) // Engajamento (mensagens, cliques, etc)
  intentScore  Int     @default(0) // Intenção de compra (urgência, orçamento)
  matchScore   Int     @default(0) // Match com imóveis disponíveis

  // Classificação
  classification String @default("cold") // "cold", "warm", "hot", "very_hot"

  // Última atualização
  lastCalculatedAt DateTime @default(now())

  // Histórico de scores (JSON)
  scoreHistory String? // Array com histórico de mudanças

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("lead_scores")
}

model LeadScoreRule {
  id          String   @id @default(cuid())
  name        String   // Nome da regra
  description String?

  // Condição
  condition   String   // "has_phone", "has_email", "price_range_match", etc.
  operator    String   @default("equals") // "equals", "contains", "greater_than", etc.
  value       String?  // Valor para comparar

  // Pontos
  points      Int      // Quantos pontos adiciona/remove

  // Categoria
  category    String   @default("profile") // "profile", "engagement", "intent", "match"

  // Status
  active      Boolean  @default(true)
  priority    Int      @default(0) // Ordem de execução

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("lead_score_rules")
}

// ============================================
// SISTEMA DE TAREFAS E FOLLOW-UPS
// ============================================

model Task {
  id          String   @id @default(cuid())

  // Relacionamentos
  leadId      String?  // Tarefa relacionada a lead
  propertyId  String?  // Tarefa relacionada a imóvel

  // Informações da tarefa
  title       String
  description String?
  type        String   @default("follow_up") // "follow_up", "call", "email", "visit", "document", "other"
  priority    String   @default("medium") // "low", "medium", "high", "urgent"

  // Atribuição
  assignedTo  String?  // ID do corretor/usuário
  assignedToName String?
  createdBy   String?  // Quem criou

  // Agendamento
  dueDate     DateTime? // Data/hora limite
  reminderAt  DateTime? // Quando enviar lembrete

  // Status
  status      String   @default("pending") // "pending", "in_progress", "completed", "cancelled"
  completedAt DateTime?
  completedBy String?

  // Resultado
  outcome     String?  // Resultado da tarefa
  notes       String?  // Observações

  // Automação
  automated   Boolean  @default(false) // Criada automaticamente?
  recurrence  String?  // JSON com regras de recorrência

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tasks")
}

model FollowUp {
  id          String   @id @default(cuid())
  leadId      String

  // Tipo de follow-up
  type        String   @default("automatic") // "automatic", "manual", "scheduled"
  channel     String   @default("whatsapp") // "whatsapp", "email", "phone", "sms"

  // Conteúdo
  subject     String?
  message     String

  // Template usado
  templateId  String?
  templateName String?

  // Agendamento
  scheduledFor DateTime?
  sentAt      DateTime?

  // Status
  status      String   @default("pending") // "pending", "sent", "delivered", "read", "failed"

  // Resposta
  responded   Boolean  @default(false)
  respondedAt DateTime?
  response    String?

  // Metadata
  metadata    String?  // JSON com dados adicionais

  // Resultado
  converted   Boolean  @default(false) // Gerou conversão?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("follow_ups")
}

// ============================================
// PROCESSAMENTO MULTIMODAL COM IA
// ============================================

model MediaProcessing {
  id          String   @id @default(cuid())

  // Relacionamentos
  leadId      String?
  propertyId  String?
  botSessionId String?

  // Arquivo
  fileUrl     String   // URL do arquivo
  fileName    String?
  fileType    String   // "audio", "image", "pdf", "video"
  fileSize    Int?     // Tamanho em bytes

  // Processamento
  status      String   @default("pending") // "pending", "processing", "completed", "failed"
  provider    String?  // "openai", "anthropic", "google"
  model       String?  // Modelo usado (whisper, gpt-4-vision, etc)

  // Resultado
  processedData String? // JSON com dados extraídos
  text        String?  // Texto transcrito/extraído
  analysis    String?  // Análise da IA
  entities    String?  // JSON com entidades extraídas (preços, endereços, etc)

  // Custos
  tokensUsed  Int?
  costUsd     Float?

  // Metadata
  processingTime Int?  // Tempo de processamento (ms)
  errorMessage String?

  processedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("media_processing")
}

